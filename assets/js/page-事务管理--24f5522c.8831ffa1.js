(window.webpackJsonp=window.webpackJsonp||[]).push([[29],{643:function(t,a,v){"use strict";v.r(a);var _=v(3),s=Object(_.a)({},(function(){var t=this,a=t.$createElement,v=t._self._c||a;return v("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[v("h1",{attrs:{id:"事务管理"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#事务管理"}},[t._v("#")]),t._v(" 事务管理")]),t._v(" "),v("h2",{attrs:{id:"事务概述"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#事务概述"}},[t._v("#")]),t._v(" 事务概述")]),t._v(" "),v("h3",{attrs:{id:"概念"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#概念"}},[t._v("#")]),t._v(" 概念")]),t._v(" "),v("p",[t._v("事务是 DBMS 提供的一种特殊手段 通过这一手段 应用程序将一系列的数据库操作组合在一起 作为一个整体执行 以保证数据库处于一致的状态")]),t._v(" "),v("h3",{attrs:{id:"事务的特性"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#事务的特性"}},[t._v("#")]),t._v(" 事务的特性")]),t._v(" "),v("h4",{attrs:{id:"原子性-atomicity"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#原子性-atomicity"}},[t._v("#")]),t._v(" 原子性 Atomicity")]),t._v(" "),v("p",[t._v("事务在逻辑上是数据库的基本工作单位 要么全部执行 要么全部不执行")]),t._v(" "),v("p",[t._v("如果一个事务内部部分未能执行成功 那么恢复时必须取消整个事务对数据库的任何影响")]),t._v(" "),v("h4",{attrs:{id:"一致性-consistency"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#一致性-consistency"}},[t._v("#")]),t._v(" 一致性 Consistency")]),t._v(" "),v("p",[t._v("事务执行的结果必须是使数据库从一个一致性状态转变到另一个一致性状态")]),t._v(" "),v("p",[v("strong",[t._v("事务的原子性是一致性的保证")])]),t._v(" "),v("h4",{attrs:{id:"隔离性-isolation"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#隔离性-isolation"}},[t._v("#")]),t._v(" 隔离性 Isolation")]),t._v(" "),v("p",[t._v("数据库系统中多个事务可以被同时执行 但是必须保证一个事务的执行不能被其他事务干扰 即一个事务内部操作及其使用的数据对于其他事务来说是隔离的")]),t._v(" "),v("h4",{attrs:{id:"持久性-durability"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#持久性-durability"}},[t._v("#")]),t._v(" 持久性 Durability")]),t._v(" "),v("p",[t._v("一个事务一旦提交 正常完成 它对数据库的数据的改变就是永久的")]),t._v(" "),v("h2",{attrs:{id:"并发控制技术"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#并发控制技术"}},[t._v("#")]),t._v(" 并发控制技术")]),t._v(" "),v("p",[t._v("并发操作有两个明显的好处")]),t._v(" "),v("ul",[v("li",[t._v("提高系统的资源利用率")]),t._v(" "),v("li",[t._v("改善短事务的响应时间")])]),t._v(" "),v("h3",{attrs:{id:"并发可能出现的问题"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#并发可能出现的问题"}},[t._v("#")]),t._v(" 并发可能出现的问题")]),t._v(" "),v("h4",{attrs:{id:"丢失更新-lost-update"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#丢失更新-lost-update"}},[t._v("#")]),t._v(" 丢失更新 Lost update")]),t._v(" "),v("p",[t._v("当访问数据库的两个不同事务以某种方式交替进行 就可能发生丢失更新的问题")]),t._v(" "),v("h4",{attrs:{id:"读-脏-数据-dirty-read"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#读-脏-数据-dirty-read"}},[t._v("#")]),t._v(" 读“脏”数据 Dirty Read")]),t._v(" "),v("p",[t._v("事务更新了某个数据项 接着由于某种原因事务又被取消了 然而所更新的项在恢复到原值之前 另一个事务读取了该项")]),t._v(" "),v("p",[t._v("这是由一个没有完成或没有提交的事务产生的")]),t._v(" "),v("h4",{attrs:{id:"不可重复读-non-repeatable-read"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#不可重复读-non-repeatable-read"}},[t._v("#")]),t._v(" 不可重复读 Non-Repeatable Read")]),t._v(" "),v("p",[t._v("某一个事务需要连续读取同一个数据项 但是在两次读取操作的间隔中 另外一个事务改变了该数据项的值 因此第一个事务 2 次读取到了不同的值")]),t._v(" "),v("hr"),t._v(" "),v("h3",{attrs:{id:"封锁-locking"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#封锁-locking"}},[t._v("#")]),t._v(" 封锁 Locking")]),t._v(" "),v("p",[t._v("封锁是普遍采用的一种并发控制手段 封锁可避免并发操作出现的问题")]),t._v(" "),v("h4",{attrs:{id:"排它锁"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#排它锁"}},[t._v("#")]),t._v(" 排它锁")]),t._v(" "),v("p",[v("strong",[t._v("可读 可写")])]),t._v(" "),v("p",[t._v("一旦对数据对象加了排它锁 "),v("code",[t._v("Exclusive Lock")]),t._v(" 简称 X 锁 写锁")]),t._v(" "),v("p",[t._v("其他事务就不能对此数据对象执行任何操作 只有该事务可以执行读和修改的操作")]),t._v(" "),v("h4",{attrs:{id:"共享锁"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#共享锁"}},[t._v("#")]),t._v(" 共享锁")]),t._v(" "),v("p",[v("strong",[t._v("可读 不可写")])]),t._v(" "),v("p",[t._v("一旦对数据对象加了共享锁"),v("code",[t._v("Share Lock")]),t._v(" 简称 S 锁 读锁")]),t._v(" "),v("p",[t._v("其他事务不能对该对象加上 X 锁 但是可以加上自己的 S 锁")]),t._v(" "),v("p",[t._v("加了 S 锁的数据对象无法被修改 但是可以被读取")]),t._v(" "),v("h4",{attrs:{id:"一级封锁协议"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#一级封锁协议"}},[t._v("#")]),t._v(" 一级封锁协议")]),t._v(" "),v("p",[t._v("任何事务在"),v("strong",[t._v("修改")]),t._v("数据前 必须加上 X 锁 直到事务结束")]),t._v(" "),v("blockquote",[v("p",[t._v("事务结束包括 "),v("code",[t._v("commit")]),t._v("以及 "),v("code",[t._v("rollback")])])]),t._v(" "),v("p",[t._v("解决了 "),v("strong",[t._v("丢失更新")]),t._v(" 但是不能保证可重复读和不读脏数据")]),t._v(" "),v("h4",{attrs:{id:"二级封锁协议"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#二级封锁协议"}},[t._v("#")]),t._v(" 二级封锁协议")]),t._v(" "),v("ul",[v("li",[t._v("一级封锁协议")]),t._v(" "),v("li",[t._v("任何事务在读取数据前 必须加上 S 锁 "),v("strong",[t._v("读完后")]),t._v("即可释放 S 锁")])]),t._v(" "),v("p",[t._v("解决了 "),v("strong",[t._v("丢失更新 读脏数据")]),t._v(" 但是不保证可重复读")]),t._v(" "),v("h4",{attrs:{id:"三级封锁协议"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#三级封锁协议"}},[t._v("#")]),t._v(" 三级封锁协议")]),t._v(" "),v("ul",[v("li",[t._v("一级封锁协议")]),t._v(" "),v("li",[t._v("任何事务在读取数据前 必须加上 S 锁 "),v("strong",[t._v("事务结束后")]),t._v("即可释放 S 锁")])]),t._v(" "),v("p",[t._v("解决了 "),v("strong",[t._v("丢失更新 读脏数据 不可重复读")])]),t._v(" "),v("h3",{attrs:{id:"加锁请求的选择策略和活锁"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#加锁请求的选择策略和活锁"}},[t._v("#")]),t._v(" 加锁请求的选择策略和活锁")]),t._v(" "),v("p",[t._v("当一个数据对象 被一个事务封锁的时候 其他任何事务对该数据进行封锁的请求只能进行等待")]),t._v(" "),v("p",[t._v("但如果有多个事务在进行等待 那么选择哪一个比较好呢？")]),t._v(" "),v("h4",{attrs:{id:"活锁"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#活锁"}},[t._v("#")]),t._v(" 活锁")]),t._v(" "),v("p",[t._v("事务申请对数据 R 进行封锁 但由于加锁请求选择策略的问题而导致事务长时间甚至永远处于等待的状态 这就是活锁")]),t._v(" "),v("h4",{attrs:{id:"选择策略"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#选择策略"}},[t._v("#")]),t._v(" 选择策略")]),t._v(" "),v("p",[t._v("最有效的方法就是 先来先服务的策略 按照先后次序对事务进行排序")]),t._v(" "),v("p",[t._v("这种方法避开了活锁的问题")]),t._v(" "),v("p",[t._v("也可在排队的时候加上优先级 适当的插队")]),t._v(" "),v("h3",{attrs:{id:"死锁"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#死锁"}},[t._v("#")]),t._v(" 死锁")]),t._v(" "),v("p",[t._v("虽然选择策略是合理的 但仍然不可能选中的封锁申请称为死锁")]),t._v(" "),v("h4",{attrs:{id:"预防死锁"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#预防死锁"}},[t._v("#")]),t._v(" 预防死锁")]),t._v(" "),v("p",[t._v("即破坏死锁产生的条件")]),t._v(" "),v("ul",[v("li",[v("p",[t._v("一次封锁法")]),t._v(" "),v("ul",[v("li",[v("blockquote",[v("p",[t._v("任何事务必须一次同时申请所有的加锁请求 若不能全部加锁 则不进行处理 处于等待状态 在执行过程中不可 再对数据申请加锁")])])]),t._v(" "),v("li",[v("p",[t._v("这降低了系统的并发性")])])])]),t._v(" "),v("li",[v("p",[t._v("顺序封锁法")]),t._v(" "),v("ul",[v("li",[v("blockquote",[v("p",[t._v("预先对所有数据对象进行一个排序 任何一个事务在执行时 必须严格按照此顺序进行加锁 若有一个未能加锁成功 则处于等待状态")])])]),t._v(" "),v("li",[v("p",[t._v("能够有效的解决死锁的产生 但是很难实现")])])])])]),t._v(" "),v("h4",{attrs:{id:"解决死锁"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#解决死锁"}},[t._v("#")]),t._v(" 解决死锁")]),t._v(" "),v("ul",[v("li",[v("p",[t._v("超时法")]),t._v(" "),v("ul",[v("li",[v("blockquote",[v("p",[t._v("预先设定一个最大的等待时间 如果一个事务的等待时间超过了此规定时间 则认为产生了死锁")])])]),t._v(" "),v("li",[v("p",[t._v("是最简单的方法 但是可能会产生误判 如果规定的时间太长 则不能有效的检测到死锁")])])])]),t._v(" "),v("li",[v("p",[t._v("等待图法")]),t._v(" "),v("ul",[v("li",[v("blockquote",[v("p",[t._v("是一个有向图 "),v("span",{staticClass:"katex"},[v("span",{staticClass:"katex-mathml"},[v("math",{attrs:{xmlns:"http://www.w3.org/1998/Math/MathML"}},[v("semantics",[v("mrow",[v("mi",[t._v("G")]),v("mo",[t._v("=")]),v("mo",{attrs:{stretchy:"false"}},[t._v("(")]),v("mi",[t._v("T")]),v("mo",{attrs:{separator:"true"}},[t._v(",")]),v("mi",[t._v("W")]),v("mo",{attrs:{stretchy:"false"}},[t._v(")")])],1),v("annotation",{attrs:{encoding:"application/x-tex"}},[t._v("G = (T,W)")])],1)],1)],1),v("span",{staticClass:"katex-html",attrs:{"aria-hidden":"true"}},[v("span",{staticClass:"base"},[v("span",{staticClass:"strut",staticStyle:{height:"0.68333em","vertical-align":"0em"}}),v("span",{staticClass:"mord mathnormal"},[t._v("G")]),v("span",{staticClass:"mspace",staticStyle:{"margin-right":"0.2777777777777778em"}}),v("span",{staticClass:"mrel"},[t._v("=")]),v("span",{staticClass:"mspace",staticStyle:{"margin-right":"0.2777777777777778em"}})]),v("span",{staticClass:"base"},[v("span",{staticClass:"strut",staticStyle:{height:"1em","vertical-align":"-0.25em"}}),v("span",{staticClass:"mopen"},[t._v("(")]),v("span",{staticClass:"mord mathnormal",staticStyle:{"margin-right":"0.13889em"}},[t._v("T")]),v("span",{staticClass:"mpunct"},[t._v(",")]),v("span",{staticClass:"mspace",staticStyle:{"margin-right":"0.16666666666666666em"}}),v("span",{staticClass:"mord mathnormal",staticStyle:{"margin-right":"0.13889em"}},[t._v("W")]),v("span",{staticClass:"mclose"},[t._v(")")])])])])]),t._v(" "),v("ul",[v("li",[t._v("T\n"),v("ul",[v("li",[t._v("所有在运行中的事务")])])])]),t._v(" "),v("p",[t._v("若 T"),v("sub",[t._v("i")]),t._v(" 申请的加锁对象被 T"),v("sub",[t._v("j")]),t._v(" 封锁 则在两者之间产生一个有向边 即 T"),v("sub",[t._v("i")]),t._v(" 等待 T"),v("sub",[t._v("j")]),t._v(" 产生有向边 ij")]),t._v(" "),v("p",[t._v("此等待解除 则删除有向边")]),t._v(" "),v("p",[t._v("显然的 死锁的产生和等待图中产生回路是等价的")]),t._v(" "),v("p",[t._v("DBMS 会周期性的检查等待图 及时发现死锁即回路")])])])])])]),t._v(" "),v("p",[t._v("一般 DBMS 发现死锁之后 会立即着手解除")]),t._v(" "),v("p",[t._v("一般选择一个发生死锁的事务 将其卷回 （释放其获得的锁和其他资源）")]),t._v(" "),v("p",[t._v("被卷回的事务必须等待一段时间后才能重新启动 以避免再次产生死锁")]),t._v(" "),v("blockquote",[v("p",[t._v("一般有一下几种方法来选择要卷回的事务")]),t._v(" "),v("ul",[v("li",[t._v("选择最迟交付的事务")]),t._v(" "),v("li",[t._v("选择已获锁最少的事务")]),t._v(" "),v("li",[t._v("选择卷回代价最小的事务")])])]),t._v(" "),v("h3",{attrs:{id:"并发调度的可串行性"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#并发调度的可串行性"}},[t._v("#")]),t._v(" 并发调度的可串行性")]),t._v(" "),v("p",[t._v("在并发执行若干事务时 这些事务交叉执行的顺序不同 最后各事务所得结果也不会相同")]),t._v(" "),v("p",[t._v("因此 并发执行的事务具有不可再现性 这是就需要一个判断的准则")]),t._v(" "),v("blockquote",[v("p",[v("strong",[t._v("可串行性准则 Serializability")])]),t._v(" "),v("p",[t._v("多个事务并发执行的结果是正确的 当且仅当其结果与按某个次序串行地执行各事务所得结果相同")])]),t._v(" "),v("p",[t._v("有多重可串行化的调度方法 其中最广泛的应用是两段封锁协议")]),t._v(" "),v("h4",{attrs:{id:"两端封锁协议"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#两端封锁协议"}},[t._v("#")]),t._v(" 两端封锁协议")]),t._v(" "),v("blockquote",[v("p",[t._v("指一个事务在读写任何数据执行必须先申请并获得对该数据的封锁")]),t._v(" "),v("p",[t._v("一旦一个事务释放了一个封锁 就不能再申请任何封锁")])]),t._v(" "),v("ul",[v("li",[t._v("扩展阶段\n"),v("ul",[v("li",[t._v("获得锁阶段")]),t._v(" "),v("li",[t._v("逐步申请并获得各种加锁 且不释放锁")])])]),t._v(" "),v("li",[t._v("收缩阶段\n"),v("ul",[v("li",[t._v("释放锁阶段")]),t._v(" "),v("li",[t._v("逐步释放各种加锁 但是无加锁申请")])])])]),t._v(" "),v("p",[t._v("若所有事务都遵循两端封锁协议 则所有这些事务的任何并发调度 都是可串行化的")]),t._v(" "),v("p",[t._v("但是可串行化调度的事务 "),v("strong",[t._v("不一定满足两断封锁协议")])]),t._v(" "),v("blockquote",[v("p",[t._v("这与前面防止死锁的一次封锁法是不一样的")]),t._v(" "),v("p",[t._v("一次封锁法满足两段封锁协议")]),t._v(" "),v("p",[t._v("但两段封锁协议并不要求一次封锁法")]),t._v(" "),v("p",[t._v("因此遵守两段封锁法的事务也是可能发生死锁的")])]),t._v(" "),v("h3",{attrs:{id:"多粒度封锁"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#多粒度封锁"}},[t._v("#")]),t._v(" 多粒度封锁")]),t._v(" "),v("h4",{attrs:{id:"多粒度封锁的概念"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#多粒度封锁的概念"}},[t._v("#")]),t._v(" 多粒度封锁的概念")]),t._v(" "),v("p",[t._v("封锁对象的规模称为封锁粒度 "),v("code",[t._v("Granularity")])]),t._v(" "),v("p",[t._v("封锁的粒度越大 则风的代价越小 但并发度也越小")]),t._v(" "),v("p",[t._v("比较适合的方法是提供多重封锁粒度供选择 称为 "),v("strong",[t._v("多粒度封锁 "),v("code",[t._v("Multiple Granularity Locking")])])]),t._v(" "),v("h4",{attrs:{id:"显示封锁和隐式封锁"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#显示封锁和隐式封锁"}},[t._v("#")]),t._v(" 显示封锁和隐式封锁")]),t._v(" "),v("ul",[v("li",[v("p",[t._v("显示封锁")]),t._v(" "),v("ul",[v("li",[v("blockquote",[v("p",[t._v("应事务的要求直接加到某一数据对象上的封锁为显示封锁")])])])])]),t._v(" "),v("li",[v("p",[t._v("隐式封锁")]),t._v(" "),v("ul",[v("li",[v("blockquote",[v("p",[t._v("数据对象并未被加锁 但是包含它的一个大粒度数据对象称为上级节点被封锁了 它也就被隐含地封锁的了")])])])])])]),t._v(" "),v("p",[t._v("这两种封锁的效果是相同的 系统在检查封锁的过程中 必须同时检查这两种封锁")]),t._v(" "),v("p",[t._v("然而回溯检查上游节点的效率比较低 因为有了新的一种方法")]),t._v(" "),v("h4",{attrs:{id:"意向锁"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#意向锁"}},[t._v("#")]),t._v(" 意向锁")]),t._v(" "),v("blockquote",[v("p",[t._v("若对某一数据对象加锁 那么必须先对包含该数据对象的所有大粒度数据对象加上意向锁")])]),t._v(" "),v("ul",[v("li",[t._v("IS 意向共享锁 "),v("code",[t._v("Intent Share Lock")]),t._v(" "),v("ul",[v("li",[t._v("对一个数据对象加 S 锁 则先对所有它的祖先都必须加上 IS 锁")])])]),t._v(" "),v("li",[t._v("IX 意向排它锁 "),v("code",[t._v("Intent Exclusive Lock")]),t._v(" "),v("ul",[v("li",[t._v("对一个数据对象加 X 锁 则必须先对它的所有祖先都加上 IX 锁")])])]),t._v(" "),v("li",[t._v("SIX 共享意向排它锁 "),v("code",[t._v("Share Intent Exclusive Lock")]),t._v(" "),v("ul",[v("li",[t._v("表示 S 锁加上 IX 锁")])])])])])}),[],!1,null,null,null);a.default=s.exports}}]);